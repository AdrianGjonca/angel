#!/usr/bin/env python3

######DEFAULT JSON######
project_json_content = """
{
	/*
	 * Angel Precompiler Settings
	 */
	"use angel-pc"		: true,
	
	/*
	 * Executable name
	 *
	 * NOTE This flag applies to the output file even when you are not 
	 *      building an executable (e.g. library)
	 */
	"executable name"			: "executable",		//For *NIX systems, Linux/MacOS for example
	"executable name (windows)"	: "executable.exe",	//For Windows
	
	/*
	 * C standard to use
	 * e.g. gnu23 or c11 ect
	 */
	"C standard"		: "gnu17",
	
	/*
	 * Libraries to link to in your project
	 * Includes all libraries, OS installed and not, static or shared.
	 *
	 * NOTE Do not include the '-l' prefix as angel-bd adds it automatically
	 *      e.g.   c -> -lc, sdl2 -> -lsdl2
	 *
	 * NOTE Still includes all standard libraries of GCC
	 */
	"libraries"			: [],
	
	/*
	 * Warning flags to be used by gcc
	 *
	 * NOTE Similar to the libraries, the '-W' flag is prepended automatically
	 *      e.g.   all -> -Wall, extra -> -Wextra
	 */
	"warnings"			: ["all"],
	
	/*
	 * Debug flags (for including debug info)
	 * 
	 * NOTE "debug level":0 is the default (no debugging info)
	 *      "debug level":2 is the standard when using the -g flag on GCC.
	 *      "debug level":3 is the highest you can go
	 *      (If you dont know about the -g flag and are learning c
	 *       I highly recommend you watch something on GDB and
	 *       debugging C code :D )
	 *
	 * NOTE The "debug flags" is to be used by the true GDB pros.
	 *      Like with the other properties, angel-bd automatically prepends
	 *      the (in this case) 'g' flag
	 *      e.g.  "dwarf-2" -> "-gdwarf-2"
	 */
	"debug level"		: 0,
	"debug flags"		: [],
	
	/*
	 * Optimization level
	 * "0", "3", "s", "fast", etc
	 * 
	 * DO YOUR RESEARCH
	 *
	 * GCC default is 0 - none
	 */
	 "optimization level"	: "0",
	 
	 /*
	  * Additional flags
	  * 
	  * Needed for generating libraries!
	  * AND also for use by the REAL c pros.
	  *
	  * NOTE the flags below only have the "-" appended to them
	  * unlike before
	  * e.g.  "fsanitize=leak" -> "-fsanitize=leak"
	  *       "shared"         -> "-shared"
	  */
	  "additional flags"	: [],

	/*
	 * Excludes
	 * 
	 * All the file names to exclude
	 *
	 * Example:    "excludes": ["test.c", "testlib.c", "testlib.h"]
	 */
	 "excludes"	: []
}
"""

import re
import sys
import os
import shutil
import subprocess
import json

################################################
##
##
## Functions
##
##
################################################
OPTION_REMOVECOMMENTS = True
OPTION_NEATIFY = False
def remove_json_comments(json_with_comments: str) -> str:
	if not OPTION_REMOVECOMMENTS:
		return json_with_comments
	
	# Remove single-line comments (//...)
	json_without_comments = re.sub(r'//.*', '', json_with_comments)
	# Remove multi-line comments (/* ... */)
	json_without_comments = re.sub(r'/\*.*?\*/', '', json_without_comments, flags=re.DOTALL)
	
	if OPTION_NEATIFY:
		return json_without_comments \
		       .strip() \
		       .replace("\t\t", " ")   \
		       .replace("\t", " ")
	else:
		return json_without_comments \
		       .strip()

def get_directories(path):
	#Chat GPT wrote this one line monstrosity
	return [os.path.join(path, entry) \
		for entry in os.listdir(path) \
		 if os.path.isdir(os.path.join(path, entry))]

def get_directories_nameonly(path):
	#Chat GPT wrote this one line monstrosity
	return [entry for entry in os.listdir(path) \
		if os.path.isdir(os.path.join(path, entry))]

def get_all_file_paths(directory, excludes):
	#Credit to big man Chat-GPT (I know f*ckall python :( )
	file_paths = []
	for root, _, files in os.walk(directory):
		for file in files:
			if (not file.endswith(".swp")) and (not file in excludes):
				file_paths.append(os.path.join(root, file))
	return file_paths


################################################
##
##
## Beginnings
##
##
################################################
if len(sys.argv) < 2:
    print("Angel BuilDer cannot work if you don't give me a project root directory")
    sys.exit()

project_path = sys.argv[1]

cfg_id = ""

for s in sys.argv:
	if s.startswith("-ID"):
		cfg_id = "__" + s[3:]
	if s.startswith("--ID"):
		cfg_id = "__" + s[4:]

if ("--json" in sys.argv):
	print(project_json_content)
	sys.exit()
if ("--json-stripped" in sys.argv):
	print(remove_json_comments(project_json_content))
	sys.exit()
if ("-h" in sys.argv) or ("--help" in sys.argv):
	print("This is the Angel BuilDer command")
	print("Use this to build your Angel-DT projects")
	print("")
	print("Syntax:")
	print("         angel-bd [project-path]")
	print("")
	print("Required Project Layout:")
	print("         / (your project-path)")
	print("         |")
	print("         |")
	print("         |__src/")
	print("         |     |")
	print("         |     source files (*.c) [can include those in nested subdirs]")
	print("         | ")
	print("         |__headers/ ")
	print("         |     |")
	print("         |     header files (*.h) [can include those in nested subdirs]")
	print("         | ")
	print("         |__libraries/ (optional)")
	print("         |     |")
	print("         |     conatins any not-os-installed Static or Shared libraries")
	print("         |     (the latter is unrecomended as Shared libraries still")
	print("         |      need cfg_idto be installed on the os level inorder to even")
	print("         |      execute the program on your machine)")
	print("         | ")
	print("         |__library_headers/  (optional)")
	print("         |     |")
	print("         |     conatins any headers pertaining to the not-os-installed")
	print("         |     Static or Shared libraries.")
	print("         | ")
	print("         |__project.json (optional) -> compilation settings (e.g.")
	print("         |                             libraries, compiler flags etc)")
	print("         |")
	print("         |__project__[cfg-id].json (optional) -> Alternate version of project.json")
	print("         :                                       Used for alternate compilation ")
	print("         :                                       configurations.")
	print("         :                                       Used with the -ID[cfg-id] flag.")
	print("         :                                       Can be more than one alternate config")
	print("         : ")
	print("         :..generated/ ")
	print("         :     :")
	print("         :     :..src/")
	print("         :     :     :")
	print("         :     :     Post-precompilation source files (*.c) [nested]")
	print("         :     : ")
	print("         :     :..headers/")
	print("         :           :")
	print("         :           Post-precompilation header files (*.h) [nested]")
	print("         : ")   
	print("         :..executable -> the executable file generated by compilation")
	print("")
	print("         (dotted lines show the files and directories generated at build)")
	print("         (regular lines show the files and directories you write yourself)")
	print("")
	sys.exit()

################################################
##
## 
## Main program
## 
##
################################################

#
#Check if project_path is a valid directory
#
if os.path.isdir(project_path):
	print(f"AngelBD : Project-Directory found |{project_path}|")
	#Rest carried on after the if statement
else:
	print( "AngelBD ! Directory not found")
	print(f"          Check path given |{project_path}|")
	sys.exit()

###
#
# project.json section
#
###

project_cfg_name = f"project{cfg_id}.json"
project_json_path   = os.path.join(project_path, project_cfg_name)
project_json_exists = os.path.isfile(project_json_path)
if project_json_exists:
	print(f"AngelBD : Project Settings found ({project_cfg_name})")
elif project_cfg_name != "":
	print(f"AngelBD ! Compilation failed as ")
	print(f"          Project Settings ({project_cfg_name}) not-found (and -ID was used)")
	sys.exit()
else:
	print(f"AngelBD : Project Settings ({project_cfg_name}) not-found (using default options)")

project_settings = dict()

if not project_json_exists:
	project_settings = json.loads(\
		remove_json_comments(project_json_content))
else:
    with open(project_json_path, 'r') as file:
    	project_settings = json.loads(remove_json_comments(file.read()))

#
# check if all properties are defined
#

pr__angelPc      = "use angel-pc" in project_settings
pr__ExecName     = "executable name" in project_settings
pr__ExecNameW    = "executable name (windows)" in project_settings
pr__CStand       = "C standard" in project_settings
pr__libraries    = "libraries" in project_settings
pr__warnings     = "warnings" in project_settings
pr__debug_level  = "debug level" in project_settings
pr__debug_flags  = "debug flags" in project_settings
pr__opt_lvl      = "optimization level" in project_settings
pr__add_flags    = "additional flags" in project_settings
pr__excludes     = "excludes" in project_settings

should_exit_prematurely = False
if not pr__angelPc:
	print(f"AngelBD ! project{cfg_id}.json -> MISSING PROPERTY \"use angel-pc\"")
	should_exit_prematurely = True
if not pr__ExecName:
	print(f"AngelBD ! project{cfg_id}.json -> MISSING PROPERTY \"executable name\"")
	should_exit_prematurely = True
if not pr__ExecNameW:
	print(f"AngelBD ! project{cfg_id}.json -> MISSING PROPERTY \"executable name (windows)\"")
	should_exit_prematurely = True
if not pr__CStand:
	print(f"AngelBD ! project{cfg_id}.json -> MISSING PROPERTY \"C standard\"")
	should_exit_prematurely = True
if not pr__libraries:
	print(f"AngelBD ! project{cfg_id}.json -> MISSING PROPERTY \"libraries\"")
	should_exit_prematurely = True
if not pr__warnings:
	print(f"AngelBD ! project{cfg_id}.json -> MISSING PROPERTY \"warnings\"")
	should_exit_prematurely = True
if not pr__debug_level:
	print(f"AngelBD ! project{cfg_id}.json -> MISSING PROPERTY \"debug level\"")
	should_exit_prematurely = True
if not pr__debug_flags:
	print(f"AngelBD ! project{cfg_id}.json -> MISSING PROPERTY \"debug flags\"")
	should_exit_prematurely = True
if not pr__opt_lvl:
	print(f"AngelBD ! project{cfg_id}.json -> MISSING PROPERTY \"optimization level\"")
	should_exit_prematurely = True
if not pr__add_flags:
	print(f"AngelBD ! project{cfg_id}.json -> MISSING PROPERTY \"additional flags\"")
	should_exit_prematurely = True
if not pr__excludes:
	print(f"AngelBD ! project{cfg_id}.json -> MISSING PROPERTY \"excludes\"")
	should_exit_prematurely = True

if should_exit_prematurely:
	print(f"AngelBD ! Compilation failed as properties are missing from project{cfg_id}.json")
	print( "          Use 'angel-bd --json' to see an example project.json file")
	sys.exit()

#
#Typechecking
#
should_exit_prematurely = False # redundant but for neatness

pr__angelPc_t      = type(project_settings["use angel-pc"]) is bool
pr__ExecName_t     = type(project_settings["executable name"]) is str
pr__ExecNameW_t    = type(project_settings["executable name (windows)"]) is str
pr__CStand_t       = type(project_settings["C standard"]) is str
pr__libraries_t    = type(project_settings["libraries"]) is list
pr__libraries_sub_t = True
if pr__libraries_t:
	for item in project_settings["libraries"]:
		pr__libraries_sub_t = pr__libraries_sub_t and type(item) is str
pr__warnings_t     = type(project_settings["warnings"]) is list
pr__warnings_sub_t = True
if pr__warnings_t:
	for item in project_settings["warnings"]:
		pr__warnings_sub_t = pr__warnings_sub_t and type(item) is str
pr__debug_level_t  = type(project_settings["debug level"]) is int
pr__debug_flags_t  = type(project_settings["debug flags"]) is list
pr__debug_flags_sub_t = True
if pr__debug_flags_t:
	for item in project_settings["debug flags"]:
		pr__debug_flags_sub_t = pr__debug_flags_sub_t and type(item) is str
pr__opt_lvl_t      = type(project_settings["optimization level"]) is str
pr__add_flags_t    = type(project_settings["additional flags"]) is list
pr__add_flags_sub_t = True
if pr__add_flags_t:
	for item in project_settings["additional flags"]:
		pr__add_flags_sub_t = pr__add_flags_sub_t and type(item) is str
pr__excludes_t    = type(project_settings["excludes"]) is list
pr__excludes_sub_t = True
if pr__excludes_t:
	for item in project_settings["additional flags"]:
		pr__excludes_sub_t = pr__excludes_sub_t and type(item) is str

if not pr__angelPc_t:
    print(f"AngelBD ! project{cfg_id}.json -> INCORRECT TYPE for \"use angel-pc\" (expected bool)")
    should_exit_prematurely = True
if not pr__ExecName_t:
    print(f"AngelBD ! project{cfg_id}.json -> INCORRECT TYPE for \"executable name\" (expected str)")
    should_exit_prematurely = True
if not pr__ExecNameW_t:
    print(f"AngelBD ! project{cfg_id}.json -> INCORRECT TYPE for \"executable name (windows)\" (expected str)")
    should_exit_prematurely = True
if not pr__CStand_t:
    print(f"AngelBD ! project{cfg_id}.json -> INCORRECT TYPE for \"C standard\" (expected str)")
    should_exit_prematurely = True
if not pr__libraries_t:
    print(f"AngelBD ! project{cfg_id}.json -> INCORRECT TYPE for \"libraries\" (expected list)")
    should_exit_prematurely = True
if not pr__libraries_sub_t:
    print(f"AngelBD ! project{cfg_id}.json -> INCORRECT TYPE for one or more items in \"libraries\" \
    (expected list pr__angelPcof str)")
    should_exit_prematurely = True
if not pr__warnings_t:
    print(f"AngelBD ! project{cfg_id}.json -> INCORRECT TYPE for \"warnings\" (expected list)")
    should_exit_prematurely = True
if not pr__warnings_sub_t:
    print(f"AngelBD ! project{cfg_id}.json -> INCORRECT TYPE for one or more items in \"warnings\" \
    (expected list of str)")
    should_exit_prematurely = True
if not pr__debug_level_t:
    print(f"AngelBD ! project{cfg_id}.json -> INCORRECT TYPE for \"debug level\" (expected int)")
    should_exit_prematurely = True
if not pr__debug_flags_t:
    print(f"AngelBD ! project{cfg_id}.json -> INCORRECT TYPE for \"debug flags\" (expected list)")
    should_exit_prematurely = True
if not pr__debug_flags_sub_t:
    print(f"AngelBD ! project{cfg_id}.json -> INCORRECT TYPE for one or more items in \"debug flags\" \
    (expected list of str)")
    should_exit_prematurely = True
if not pr__opt_lvl_t:
    print(f"AngelBD ! project{cfg_id}.json -> INCORRECT TYPE for \"optimization level\" (expected str)")
    should_exit_prematurely = True
if not pr__add_flags_t:
    print(f"AngelBD ! project{cfg_id}.json -> INCORRECT TYPE for \"additional flags\" (expected list)")
    should_exit_prematurely = True
if not pr__add_flags_sub_t:
    print(f"AngelBD ! project{cfg_id}.json -> INCORRECT TYPE for one or more items in \"additional flags\" \
    (expected list of str)")
    should_exit_prematurely = True
if not pr__excludes_t:
    print(f"AngelBD ! project{cfg_id}.json -> INCORRECT TYPE for \"excludes\" (expected list)")
    should_exit_prematurely = True
if not pr__add_flags_sub_t:
    print(f"AngelBD ! project{cfg_id}.json -> INCORRECT TYPE for one or more items in \"excludes\" \
    (expected list of str)")
    should_exit_prematurely = True

if should_exit_prematurely:
	print(f"AngelBD ! Compilation failed as properties are of wrong types in project.json")
	print( "          Use 'angel-bd --json' to see an example project.json file")
	sys.exit()

###
#
# main section
#
###

#
#Checks if project directories are set up correctly
#
pr_folders_nameonly = get_directories_nameonly(project_path) 
contains_src = \
	"src" in pr_folders_nameonly
 
contains_headers = \
	"headers" in pr_folders_nameonly

contains_libs = \
	"libraries" in pr_folders_nameonly

contains_libheads = \
	"library_headers" in pr_folders_nameonly

contains_all = contains_src  and contains_headers

if not contains_libs:
	print("AngelBD : Missing libraries/ folder")
	print("          However this is optional")
	print("          (angel-bd --help for info)")
if not contains_libheads:
	print("AngelBD : Missing library_headers/ folder")
	print("          However this is optional")
	print("          (angel-bd --help for info)")
	
if not contains_all:
	print("AngelBD ! Build Failed")
	if not contains_src:
		print("           Missing src/ folder")
		print("           (angel-bd --help for info)")
	if not contains_headers:
		print("           Missing headers/ folder")
		print("           (angel-bd --help for info)")
	sys.exit()
else:
	print("AngelBD : src/, ")
	print("          headers/, ")
	print("          libraries/ and ")
	print("          library_headers/ folders found!")


#
#Get a list of all src and header files
#
src_files = []
header_files = []
libheader_files = []

src_folderPath = os.path.join(project_path, "src")
headers_folderPath = os.path.join(project_path, "headers")
lib_folderPath = os.path.join(project_path, "libraries")
libhead_folderPath = os.path.join(project_path, "library_headers")

src_files = get_all_file_paths(src_folderPath, project_settings["excludes"])
header_files = get_all_file_paths(headers_folderPath, project_settings["excludes"])
libhead_files = get_all_file_paths(libhead_folderPath, project_settings["excludes"])

og_files = src_files + header_files + libhead_files

rel_src_files = [os.path.relpath(src_file, src_folderPath) \
                 for src_file in src_files]
rel_header_files = [os.path.relpath(header_file, headers_folderPath) \
                    for header_file in header_files]
rel_libhead_files = [os.path.relpath(libhead_file, libhead_folderPath) \
                    for libhead_file in libhead_files]
rel_files = rel_src_files + rel_header_files + rel_libhead_files


#
#Create list of src and header generated files
#
generated_folder = os.path.join(project_path, "generated")
generated_src_folder = os.path.join(generated_folder, "src")
	#we are including library_headers and project headers in one generated-folder
	#as behaviour is the same 
generated_headers_folder = os.path.join(generated_folder, "headers")


generated_src_files = [os.path.join(generated_src_folder, src_file) \
					   for src_file in rel_src_files]
generated_header_files = [os.path.join(generated_headers_folder, header_file) \
					   for header_file in rel_header_files] \
					   + [os.path.join(generated_headers_folder, libhead_file) \
					   for libhead_file in rel_libhead_files]
generated_files = generated_src_files + generated_header_files


#
#Create lists of folders to be made
#
tomake_folders_src = [os.path.dirname(src_file) \
					  for src_file in generated_src_files] + \
					 [os.path.dirname(header_file) \
					  for header_file in generated_header_files]


#
#Cleans the generated/ folder
#
if os.path.exists(generated_folder):
	shutil.rmtree(generated_folder)
	print("AngelBD : generated/ directory structure cleaned")
else:
	print("AngelBD : generated/ directory allready clean")


#
#Creates said folders/directories
#
for a_folder in tomake_folders_src:
	os.makedirs(a_folder, exist_ok=True)
print("AngelBD : generated/ directory structure made")


#
#Checks if angel-pc is installed
#
if project_settings["use angel-pc"] and not shutil.which("angel-pc"):
    print("AngelBD ! Build Failed")
    print("           The Angel PreCompiler is not installed on your system")
    print("           (or is not setup in you PATH environment variable)")
    print("           Please reinstall Angel Development Tools and try again!")
    sys.exit()
if not project_settings["use angel-pc"]:
    print("AngelBD : project.json configured to not use AngelPC")


#
#Create a dictionary of source to output files
#
og_to_gen = dict()

for i in range(0, len(generated_files)):
	og_to_gen[og_files[i]] = generated_files[i]

#
#Precompiles the files
#
if project_settings["use angel-pc"] == True:
	#print()
	commands_to_execute = [ "angel-pc " + og_file + " -o " + og_to_gen[og_file] \
							for og_file in og_files]
	i = 0
	for command in commands_to_execute:
		result = subprocess.run(command, shell=True, capture_output=True, text=True)
		pc_out = result.stdout
		print(pc_out, end="")
		print("AngelBD : (----Precompiled " + og_files[i] + " to " + og_to_gen[og_files[i]] + ")")
		i += 1
	#print()
else:
	print("AngelBD : Precompilation skipped")
	for og_file in og_files:
		shutil.copyfile(og_file, og_to_gen[og_file])
		print("----Copied " + og_file + " to " + og_to_gen[og_file])


#
#Create name for the executable
#
executable_file = ""

if os.name == "nt":
	executable_file = os.path.join(project_path, project_settings["executable name (windows)"])
else:
	executable_file = os.path.join(project_path, project_settings["executable name"])


#
#Checks if gcc is installed
#
if not shutil.which("gcc"):
    print("AngelBD ! Build Failed")
    print("          GCC is not installed or installed incorrectly")
    print("          Please (re)install GCC!")
    sys.exit()

class bcolors: #I have no clue why i put this here (INVESTIGATE)
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

#
#Create the gcc command we shall execute
#
compile_command = "gcc -I"
compile_command += generated_headers_folder
compile_command += " -L"
compile_command += lib_folderPath
compile_command += " -std="
compile_command += project_settings["C standard"]

for a_lib in project_settings["libraries"]:
	compile_command += " -l"
	compile_command += a_lib

for a_warning in project_settings["warnings"]:
	compile_command += " -W"
	compile_command += a_warning

compile_command += " -g"
compile_command += str(project_settings["debug level"])

for a_debug_flag in project_settings["debug flags"]:
	compile_command += " -g"
	compile_command += a_debug_flag

compile_command += " -O"
compile_command += project_settings["optimization level"]

for a_flag in project_settings["additional flags"]:
	compile_command += " -"
	compile_command += a_flag

compile_command += " -o "
compile_command += executable_file
compile_command += " "
for the_src_file in generated_src_files:
	compile_command += the_src_file + " "

#print(compile_command)

#
#Remove old executable
#
if os.path.exists(executable_file):
	print("AngelBD : Deleting old executable file")
	os.remove(executable_file)

#
#Compile
#

print("AngelBD : Calling GCC to compile")
result = subprocess.run(compile_command, shell=True, capture_output=True, text=True)

print("")

print("GCC Output :\n", result.stdout)

print("")

print("GCC Error  :\n", result.stderr)

#
#Summary
#

print("")
if os.path.exists(executable_file):
	print("AngelBD : Compilation appears to have been a SUCCESS!")
else:
	print("AngelBD : Compilation appears to have FAILED!")
















