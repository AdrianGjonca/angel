#!/usr/bin/env python3

import re
import sys

if len(sys.argv) < 2:
    print("Angel PreCompiler cannot work if you don't give me a source file :(")
    sys.exit()

filename = sys.argv[1]
should_outputToFile = "-o" in sys.argv

if ("-h" in sys.argv) or ("--help" in sys.argv):
    print("This is the Angel PreCompiler command")
    print("Use this to build precompile your Angel-DT source files")
    print("")
    print("Syntax:")    
    print("         angel-pc [input-file-path]")
    print("             => Will output to console")
    print("         angel-pc [input-file-path] -o [output-file-path]")
    print("             => Will output to file")
    print("")
    print("Note:")
    print("         This script is called by Angel BuilDer (angel-bd)")
    print("         We recomend you use the Angel Builder to build your")
    print("         projects. Use this seperately if you know what you")
    print("         are doing. :)")
    print("")
    sys.exit()


################################################
##
## 
## Functions
## 
##
################################################

###
# Simply checks if a character is a whitespace
# whitespace = {'\t', '\n', ' '}
###
# character : char -> the character in question
# ~return~ : bool -> true if is whitespace, false if not
###
def is_whitespc(character):
    if character == "\t":
        return True
    if character == "\n":
        return True
    if character == " ":
        return True
    return False

###
# (Disclaimer CHAT_GPT generated this :/)
# Precompiles the namespaces
# str::cpy -> str_0cpy
# Designed to be the same length to make it understandable
# REMEMBER TO BE CONSISE, NO MORE THAT 31 CHARS ARE SIGNIFICANT IN C.
###
# code : string -> the original code
# ~return~ : string -> the resultant code
###
def handle_namespaces(code):
    # Regex to split between strings and non-string parts
    pattern = r'(".*?(?<!\\)"|\b\w+::)'
    
    def replacer(match):
        part = match.group(1)
        if part.startswith('"'):  # Skip string literals
            return part
        else:  # Replace namespace occurrences
            return re.sub(r'(\b\w+)::', r'\1_0', part)
    
    return re.sub(pattern, replacer, code, flags=re.DOTALL)

###
# Handles chained calls - e.g. mystring@tocapital()@replace("a", "b")
#   The above becomes -> replace(tocapital(mystring), "a", "b")
###
# code : string -> the original code
# ~return~ : string -> the resultant code
###
def handle_chains(code):
    ################################################
    def get_at_sym_loc(code_internal):
        #Locate all valid @
        at_locations = []
        
        #This FSM works but you can revese engineer if you want haha
        i = 0
        fsm_state = 0
        while i < len(code_internal):
            if fsm_state == 0:
                if code_internal[i] == '"':
                    fsm_state = 1
                elif code_internal[i] == "'":
                    fsm_state = 2
                elif code[i] == "@":
                    at_locations.append(i)
            elif fsm_state == 1:
                if code_internal[i] == '"':
                    fsm_state = 0
                elif code_internal[i] == '\\':
                    fsm_state = 3  
            elif fsm_state == 2:
                if code_internal[i] == "'":
                    fsm_state = 0
                elif code_internal[i] == '\\':
                    fsm_state = 4
            elif fsm_state == 3: 
                fsm_state = 1
            elif fsm_state == 4: 
                fsm_state = 2
            i += 1
        return at_locations
    ################################################
    def sort_out_first_at(code_internal, first_at):
        #print("First at" + str(first_at))
    
        beginLHS = first_at - 1
        while is_whitespc(code_internal[beginLHS]):
            beginLHS -= 1
        beginLHS -= 1
        
        while beginLHS > 0 and not is_whitespc(code_internal[beginLHS]):
            beginLHS -= 1
        if is_whitespc(code_internal[beginLHS]):
            beginLHS += 1
        
        endLHS = first_at-1
        while is_whitespc(code_internal[endLHS]):
            endLHS -= 1
        endLHS += 1
        #print(f"<{beginLHS},{first_at-1}>")
        LHS = code_internal[beginLHS:endLHS]
        #print("LHS: " + LHS)
        
        endToken = first_at
        while endToken < len(code_internal) and code_internal[endToken] != '(':
            endToken += 1
        
        #print(f"<{first_at+1},{endToken}>")
        TOKEN = code_internal[first_at + 1:endToken].strip()
        #print("TOKEN: " + TOKEN)
        
        ##Now the hard bit => The inside of the brackets
        #We will assume the code is written correctly for now, so we are assuming there is a "("
        
        endContent = endToken + 1 # lalala([d]adada
        bracket_lvl = 1
        
        has_comma = False
        
        while bracket_lvl > 0 and endContent < len(code_internal):
            if code_internal[endContent] == ",":
                has_comma = True
            
            if code_internal[endContent] == '(':
                bracket_lvl += 1
            elif code_internal[endContent] == ')':
                bracket_lvl -= 1
            elif code_internal[endContent] == "'":
                endContent += 1
                while code_internal[endContent] != "'":
                    if  code_internal[endContent] == "\\":
                        endContent += 1
                    endContent += 1
            elif code_internal[endContent] == '"':
                endContent += 1
                while code_internal[endContent] != '"':
                    #print("<<<< " + code_internal[endContent])
                    if code_internal[endContent] == "\\":
                        endContent += 1
                    endContent += 1
            endContent += 1
        
        #print(f"<{endToken + 1},{endContent - 1}>")
        CONTENT = code_internal[endToken + 1:endContent - 1]
        #print("CONTENT: " + CONTENT)
        
        return code_internal[:beginLHS] + \
            TOKEN + "(" + LHS + ("," if has_comma else "") + CONTENT + ")" \
            + code_internal[endContent:]
    
    ################################################
    
    all_the_ats = get_at_sym_loc(code)
    
    while all_the_ats:
        code = sort_out_first_at(code , all_the_ats[0])
        all_the_ats = get_at_sym_loc(code)
        
    return code
    
################################################
##
## 
## Main program
## 
##
################################################

if should_outputToFile:
    if len(sys.argv) < 4:
        print("Angel PreCompiler cannot output to file if you don't tell me where to output :(")
        sys.exit()

try:
    with open(filename, 'r') as file:
        og_code = file.read()
        transformed_code = handle_namespaces(og_code)
        transformed_code = handle_chains(transformed_code)
        if should_outputToFile:
            with open(sys.argv[len(sys.argv) - 1], "w") as fileout:
                print(transformed_code, file=fileout)
        else:
            print(transformed_code)
except FileNotFoundError:
    print("The file does not exist!")
except IOError:
    print("An error occurred while loading the file!")



