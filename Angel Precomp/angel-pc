#!/usr/bin/env python3

import re
import sys

if len(sys.argv) < 2:
    print("Angel PreCompiler cannot work if you don't give me a source file :(")
    sys.exit(2)

filename = sys.argv[1]
should_outputToFile = "-o" in sys.argv

DEBUG__prefix = ("-Dp" in sys.argv) or ("-Dp1" in sys.argv)
DEBUG__prefix_alt = "-Dp2" in sys.argv
DEBUG__echo = "-De" in sys.argv

if ("-h" in sys.argv) or ("--help" in sys.argv):
    print("This is the Angel PreCompiler command")
    print("Use this to build precompile your Angel-DT source files")
    print("")
    print("Syntax:")    
    print("         angel-pc [input-file-path]")
    print("             => Will output to console")
    print("         angel-pc [input-file-path] -o [output-file-path]")
    print("             => Will output to file")
    print("")
    print("Note:")
    print("         This script is called by Angel BuilDer (angel-bd)")
    print("         We recomend you use the Angel Builder to build your")
    print("         projects. Use this seperately if you know what you")
    print("         are doing. :)")
    print("")
    sys.exit(0)


################################################
##
## 
## Functions
## 
##
################################################

###
# Simply checks if a character is a whitespace
# whitespace = {'\t', '\n', ' '}
###
# character : char -> the character in question
# ~return~ : bool -> true if is whitespace, false if not
###
def is_whitespc(character):
    if character == "\t":
        return True
    if character == "\n":
        return True
    if character == " ":
        return True
    return False

###
# (Disclaimer CHAT_GPT generated this :/)
# Precompiles the namespaces
# str::cpy -> str_0cpy
# Designed to be the same length to make it understandable
# REMEMBER TO BE CONSISE, NO MORE THAT 31 CHARS ARE SIGNIFICANT IN C.
###
# code : string -> the original code
# ~return~ : string -> the resultant code
###
def handle_namespaces(code):
    # Regex to split between strings and non-string parts
    pattern = r'(".*?(?<!\\)"|\b\w+::)'
    
    def replacer(match):
        part = match.group(1)
        if part.startswith('"'):  # Skip string literals
            return part
        else:  # Replace namespace occurrences
            return re.sub(r'(\b\w+)::', r'\1_0', part)
    
    return re.sub(pattern, replacer, code, flags=re.DOTALL)

###
# Handles chained calls - e.g. mystring@tocapital()@replace("a", "b")
#   The above becomes -> replace(tocapital(mystring), "a", "b")
###
# code : string -> the original code
# ~return~ : string -> the resultant code
###
def handle_chains(code):
    ################################################
    def get_at_sym_loc(code_internal):
        #Locate all valid @
        at_locations = []
        
        #This FSM works but you can revese engineer if you want haha
        i = 0
        fsm_state = 0
        while i < len(code_internal):
            if fsm_state == -2:
                if code_internal[i] == '*' and i+1 < len(code_internal):
                    i += 1
                    if code_internal[i] == '/':
                        fsm_state = 0
            elif fsm_state == -1:
                #print("in comment: " + code_internal[i])
                if code_internal[i] == '\n':
                    fsm_state = 0
            elif fsm_state == 0:
                #print(code_internal[i])
                if code_internal[i] == '"':
                    fsm_state = 1
                elif code_internal[i] == "'":
                    fsm_state = 2
                elif code[i] == "@":
                    at_locations.append(i)
                elif code[i] == "/"  and i+1 < len(code_internal):
                    i += 1
                    if code[i] == "/":
                        fsm_state = -1
                    elif code[i] == "*":
                        fsm_state = -2
            elif fsm_state == 1:
                if code_internal[i] == '"':
                    fsm_state = 0
                elif code_internal[i] == '\\':
                    fsm_state = 3  
            elif fsm_state == 2:
                if code_internal[i] == "'":
                    fsm_state = 0
                elif code_internal[i] == '\\':
                    fsm_state = 4
            elif fsm_state == 3: 
                fsm_state = 1
            elif fsm_state == 4: 
                fsm_state = 2
            i += 1
        return at_locations
    ################################################
    def sort_out_first_at(code_internal, first_at):
        #print("First at" + str(first_at))
    
        beginLHS = first_at - 1
        while is_whitespc(code_internal[beginLHS]):
            beginLHS -= 1
        beginLHS -= 1
        
        while beginLHS > 0 and not is_whitespc(code_internal[beginLHS]):
            beginLHS -= 1
        if is_whitespc(code_internal[beginLHS]):
            beginLHS += 1
        
        endLHS = first_at-1
        while is_whitespc(code_internal[endLHS]):
            endLHS -= 1
        endLHS += 1
        #print(f"<{beginLHS},{first_at-1}>")
        LHS = code_internal[beginLHS:endLHS]
        #print("LHS: " + LHS)
        
        endToken = first_at
        while endToken < len(code_internal) and code_internal[endToken] != '(':
            endToken += 1
        
        #print(f"<{first_at+1},{endToken}>")
        TOKEN = code_internal[first_at + 1:endToken].strip()
        #print("TOKEN: " + TOKEN)
        
        ##Now the hard bit => The inside of the brackets
        #We will assume the code is written correctly for now, so we are assuming there is a "("
        
        endContent = endToken + 1 # lalala([d]adada
        bracket_lvl = 1
        
        has_comma = False
        
        while bracket_lvl > 0 and endContent < len(code_internal):
            if code_internal[endContent] == ",":
                has_comma = True
            
            if code_internal[endContent] == '(':
                bracket_lvl += 1
            elif code_internal[endContent] == ')':
                bracket_lvl -= 1
            elif code_internal[endContent] == "'":
                endContent += 1
                while code_internal[endContent] != "'":
                    if  code_internal[endContent] == "\\":
                        endContent += 1
                    endContent += 1
            elif code_internal[endContent] == '"':
                endContent += 1
                while code_internal[endContent] != '"':
                    #print("<<<< " + code_internal[endContent])
                    if code_internal[endContent] == "\\":
                        endContent += 1
                    endContent += 1
            endContent += 1
        
        #print(f"<{endToken + 1},{endContent - 1}>")
        CONTENT = code_internal[endToken + 1:endContent - 1]
        #print("CONTENT: " + CONTENT)
        
        #print("." + str(has_comma))
        
        if CONTENT and CONTENT.strip():
        	has_comma = True # A hack fix
        
        return code_internal[:beginLHS] + \
            TOKEN + "(" + LHS + ("," if has_comma else "") + CONTENT + ")" \
            + code_internal[endContent:]
    	
    ################################################
    
    all_the_ats = get_at_sym_loc(code)
    
    #print(all_the_ats)
    
    while all_the_ats:
        code = sort_out_first_at(code , all_the_ats[0])
        all_the_ats = get_at_sym_loc(code)
        
    return code

##
# Prefix handling
##

###
# Splits the prefix section from the c-code
###
# code : string -> the original code
# ~return~ : (string,string) -> the prifix section, the C code. 
#                               Prefix is "" if no prefix section. 
#                               Returns None if the there is an issue
###
def split_prefix(code):
    #print("~~"+code+"~~")
    #FSM to split prefix and C-code section
    
    # a  - 0 -> starting 
    # b1 - 1
    # b2 - 2
    # b3 - 3
    # c  - 4
    # d1 - 5
    # d2 - 6
    # d3 - 7
    #
    # X  - 8   (accepting : no prefix)
    # F  - 9   (failure   : incorrect notation)
    # E  - 10  (accepting : has prefix)
    
    index = 0
    state = 0
    IndexC = -1
    IndexE = -1
    
    for a in code:
        #start_state = state
        if state == 0:          #a
            #
            if is_whitespc(a):
                state = 0
            elif a == "`":
                state = 1
            else:
                state = 8
            #
        elif state == 1:        #b1
            #
            if a == "`":
                state = 2
            else:
                state = 9
            #
        elif state == 2:        #b2
            #
            if a == "`":
                state = 3
            else:
                state = 9
            #
        elif state == 3:        #b3
            #
            if a == "`":
                state = 9
            else:
                state = 4
                IndexC = index
            #
        elif state == 4:        #c
            #
            if a == "`":
                state = 5
            else:
                state = 4
            #
        elif state == 5:        #d1
            #
            if a == "`":
                state = 6
            else:
                state = 4
            #
        elif state == 6:        #d2
            #
            if a == "`":
                state = 7
            else:
                state = 4
            #
        elif state == 7:        #d3
            #
            if a == "`":
                state = 4
            else:
                state = 10
                IndexE = index
            #
        elif state == 8:        #X
            break
        elif state == 9:        #F
            break
        elif state == 10:       #E
            break
        
        #print("* " + a + " " + str(start_state) + "->" + str(state))
        
        index += 1
    
    #print("STATE::::" + str(state))
    
    if state == 9:
        return None
    
    if state == 8:
        return ("", code)
    
    if state == 10:
        #print(f"[{IndexC } : {IndexE - 3}]")
        return (code[IndexC : IndexE - 3], code[IndexE:])
    
    return None #Should never get here

###
# Takes prefix section and tokenized statements
##
# prefix : String -> the prefix section
# ~return~ : List(List(String)) -> tokenized statements
###
def get_statements(prefix):
    aliases = {}
    
    pattern = r';(?=(?:[^`]*`[^`]*`)*[^`]*$)'
    statements = re.split(pattern, prefix)
    
    for i in range(len(statements)):
        statements[i] = statements[i] \
                        .replace("\n", "") \
                        .replace("\t", "    ") \
                        .strip()
    
    to_remove = []
    for a_str in statements:
        if a_str == "":
            to_remove.append(a_str)
    
    statements = [item for item in statements if item not in to_remove]
    
    
    pattern = r' (?=(?:[^`]*`[^`]*`)*[^`]*$)'
    tokenized_statements = []
    for a_str in statements:
        tokenized = re.split(pattern, a_str)
        tokenized = [item for item in tokenized if item != ""]
        tokenized_statements.append(tokenized)
    
    ####
    
    return tokenized_statements

###
# Takes your original C-code and an alias dictionaru and 
# returns the C-code that has has the aliases processed 
##
# aliases : Dictionary(String, String) -> the alias dictionary
# c_code : String -> the unprocessed C-code
# ~return~ : String -> the processed C-code
###
def swap_aliases(aliases, c_code):
    position = 0
    outCode = ""
    while position < len(c_code):
        if c_code[position] == "\"":
            outCode += "\""
            in_str = True
            while in_str:
                position += 1
                outCode += c_code[position]
                if c_code[position] == "\"" and c_code[position-1] != "\\":
                    in_str = False
        
        elif c_code[position] == "`":
            #outCode += "|"
            position += 1
            in_ali = True
            
            alias = ""
            
            while in_ali:
                if c_code[position] == "`":
                    in_ali = False
                else:
                    alias += c_code[position]
                position += 1
            if alias in aliases:
                outCode += aliases[alias] + c_code[position]
            elif "\n" in alias:
                print(f"AngelPC : |{filename}| ! Alias contains newline characters!")
                print(f"                         Alias `{alias}` is malformed")
                sys.exit(1)
            else:
                print(f"AngelPC : |{filename}| ! Alias undefined")
                print(f"                         Alias `{alias}` is undefined")
                sys.exit(1)
            #outCode += "|"
        
        elif position>0 and c_code[position] == "/" and c_code[position-1] == "/":
            while position < len(c_code) and c_code[position] != "\n":
                outCode += c_code[position]
                position += 1
            outCode += c_code[position]
        
        elif position>0 and c_code[position-1] == "/" and c_code[position] == "*":
            while not(position >= len(c_code) or (c_code[position-1] == "*" and c_code[position] == "/")):
                outCode += c_code[position]
                position += 1
            outCode += "/"
            
        else:
            #print("> " + c_code[position]) #will show one / on all comments unfortunately
            
            #if c_code[position] == "\n": 
            #    outCode += "\n"
            #elif c_code[position] == "/": 
            #    outCode += "/"
            #else:
            #    outCode += "#"
            outCode += c_code[position]
            
        position += 1
                    
    return outCode

###
# Takes your split original code and returns the C-code that has been processed 
# under the stuff handled through the prefix section.
##
# prefix : String -> the prefix section
# c_code : String -> the unprocessed C-code
# ~return~ : String -> the processed C-code
###
def handle_prefix(prefix, c_code):
    out_code = c_code;
    statements = get_statements(prefix) #List of List of String
    
    ##
    # 'alias' statements
    alias_statements = [item for item in statements if item[0] == "alias"]
    statements = [item for item in statements if item not in alias_statements]
    alias_formatted_correctly = True
    for item in alias_statements:
        if len(item) != 4:
            alias_formatted_correctly = False
            break
        if item[2] != "is":
            alias_formatted_correctly = False
            break
        if (not item[1].startswith("`")) or (not item[1].startswith("`")):
            alias_formatted_correctly = False
            break
        if (not item[3].startswith("`")) or (not item[3].startswith("`")):
            alias_formatted_correctly = False
            break
    if alias_formatted_correctly:
        aliases = {}
        for item in alias_statements:
            aliases[item[1][1:-1]] = item[3][1:-1]
        out_code = swap_aliases(aliases, out_code)
    else: 
        #TODO implement better error messages (needn't be amazing)
        print(f"AngelPC : |{filename}| ! Prefix-section issue")
        print( "                         An 'alias' statement has been incorrectly formatted")
        sys.exit(1)
    
    ##
    # 'echo' statements
    echo_statements = [item for item in statements if item[0] == "echo"]
    statements = [item for item in statements if item not in echo_statements]
    echo_formatted_correctly = True
    for item in echo_statements:
        if len(item) != 2:
            alias_formatted_correctly = False
            break
        if (not item[1].startswith("`")) or (not item[1].startswith("`")):
            alias_formatted_correctly = False
            break
    if alias_formatted_correctly:
        for item in echo_statements:
            print(f"AngelPC : |{filename}| - {item[1][1:-1]}")
    else: 
        #TODO implement better error messages (needn't be amazing)
        print(f"AngelPC : |{filename}| ! Prefix-section issue")
        print( "                         An 'echo' statement has been incorrectly formatted")
        sys.exit(1)
    
    ##
    # the rest
    for i in range(prefix.count("\n")):
        #To preserve line numbers (makes debugging on GCC easier)
        out_code = "//PREFIX SECTION\n" + out_code
    
    return out_code
    
##pass
# Other shennanigans
##

###
# Handles the actual file and returns what must be output
###
# code : string -> the original code
# ~return~ : string -> the resultant code
###
def handle_code(code):
    
    if DEBUG__echo:
        return code
    if DEBUG__prefix:
        return split_prefix(code)[0]
    if DEBUG__prefix_alt:
        return split_prefix(code)[1]
    
    split_code = split_prefix(code)
    if split_code == None:
        print(f"AngelPC : |{filename}| ! Error with formatting of prefix section of file")
        sys.exit(1)
    
    transformed_code = handle_prefix(split_code[0], split_code[1])
    transformed_code = handle_namespaces(transformed_code)
    transformed_code = handle_chains(transformed_code)
    return transformed_code

################################################
##
## 
## Main program
## 
##
################################################

if should_outputToFile:
    if len(sys.argv) < 4:
        print("Angel PreCompiler cannot output to file if you don't tell me where to output :(")
        sys.exit(1)

try:
    with open(filename, 'r') as file:
        og_code = file.read()
        transformed_code = handle_code(og_code)
        if should_outputToFile:
            with open(sys.argv[len(sys.argv) - 1], "w") as fileout:
                print(transformed_code, file=fileout)
        else:
            print(transformed_code)
except FileNotFoundError:
    print("AngelPC : |{filename}| ! The file does not exist!")
    sys.exit(2)
except IOError:
    print("AngelPC : |{filename}| ! An error occurred while loading the file!")
    sys.exit(5)



